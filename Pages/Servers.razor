@page "/servers"

@* @rendermode InteractiveServer  *@

@inject NavigationManager NavigationManager

<h3>Servers</h3>
<p>testing a routable component</p>
<br/>
<ServerControl></ServerControl>
<br/>
<br/>
<div class="container-fluid text-center">
    <div class="row w-100">
        @foreach (var city in cities){
            <div class="col h-100">
                <div class="card">
                    @* <img src="@($"/images/{city}.png")" class="card-img-top" alt="..."> *@
                    <div class="card-body">
                        <button type="button" class="btn btn-primary">@city</button>
                    </div>
                </div>
            </div>
        }
    </div>
</div>
<br/>
<br/>
<ul>
    @foreach (var server in servers){
        <li>@server.Name in @server.City is 
            <span style="color:@(server.IsOnLine ? "green" : "red")">
                @(server.IsOnLine ? "online" : "offline")
            </span>
            &nbsp;
            <a href="/servers/@server.ServerId" class="btn btn-link">Edit</a>
            &nbsp;
            <EditForm
                Model="server"
                FormName="@($"form-server-{server.ServerId}")"
                OnValidSubmit="@(() => {DeleteServer(server.ServerId);})">
                <button type="submit" class="btn btn-primary">Delete</button>
            </EditForm>
        </li>
    }
</ul>
<p>
    <a href="/servers/add" class="btn btn-primary">Add Server</a>
</p>

@code {
    private List<Server> servers = ServersRepository.GetServerByCity("San Diego");
    private List<String> cities = CitiesRepository.GetCities();

    private void DeleteServer(int serverId){
        if(serverId > 0){
            ServersRepository.DeleteServer(serverId);
            NavigationManager.NavigateTo("/servers");
        }
    }
}
using Microsoft.AspNetCore.Mvc.Rendering;
#line default
